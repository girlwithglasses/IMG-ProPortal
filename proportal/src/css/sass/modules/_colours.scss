// modules/colours

$text-color: #444;
$body-bg: #fff;

// JGI colours
$jgi-palette: (
	black:   #343434, // rgb(52,52,52);
	dk_grey: #5a5a5a, // rgb(90,90,90);
	midgrey: #919090, // rgb(145,144,144);
	reddish: #d3691b, // rgb(211,105,27);
	dk_blue: #648caa, // rgb(100,140,170);
	green:   #99bd3c, // rgb(153,189,60);
	lite_or: #fdba57  // rgb(253,186,87);
);

// non-JGI colours
$palette: (
	primary: map-get( $jgi-palette, dk_blue ),
	secondary: map-get( $jgi-palette, reddish ),
	valid:   map-get( $jgi-palette, green ),
	error:   #d3080c,
	warning: map-get( $jgi-palette, lite_or ),
	info:    lighten( map-get( $jgi-palette, dk_blue ), 20% ),
);

@function hue($key) {
  @if map-has-key( $jgi-palette, $key ) {
  	@return map-get( $jgi-palette, $key );
  }
  @if not map-has-key($palette, $key) {
    @warn "Key `#{$key}` not found in $palette map.";
  }
  @return map-get($palette, $key);
}

// primary colour for the theme
$primary: hue( dk_blue );
// secondary colour
$secondary: hue( reddish );

/** other useful colours */
$valid: hue( valid );
$valid-bg: lighten( $valid, 20% );

$error: hue( error );
$error-bg: lighten( $error, 20% );

$warning: hue( warning );
$warning-bg: lighten( hue( lite_or ), 50% );

$info: hue( info );
$info-bg: lighten( hue( dk_blue ), 60% );

.primary-colour-bg {
	background: $primary;
}

.secondary-colour-bg {
	background: $secondary;
}

/**
	swatches for patternlab
*/

.jgi-palette {

	@each $name, $col in $jgi-palette {
		.swatch--#{$name} {
			background: $col;
		}
	}

	@each $name, $col in $palette {
		.swatch--#{$name} {
			background: $col;
		}
	}

}


$nav-link: #000;
$nav-link-bg: #9ce;

@mixin r-border( $w, $col ){
	border-right: $w solid $col;
}

@mixin l-border( $w, $col ) {
	border-left: $w solid $col;
}

@mixin b-border( $w, $col ) {
	border-bottom: $w solid $col;
}

@mixin t-border( $w, $col ) {
	border-top: $w solid $col;
}

@mixin borders( $w, $col ) {
	border: $w solid $col;
}

@mixin nav-link {
	color: $nav-link;
	background: $nav-link-bg;
}

@mixin v-link {
	&:visited {
		color: darken( #fff, 5% );
		background: darken( $nav-link, 5% );
	}
}

@mixin hf-link {
	&:hover, &:focus {
		color: saturate( $nav-link, 10% );
		background: saturate( $nav-link-bg, 10% );
	}
}

@mixin a-link {
	&:active {
		color: saturate( $nav-link, 20% );
		background: saturate( $nav-link-bg, 20% );
	}
}

@mixin nav-colours {
	@include nav-link;
	@include v-link;
	@include hf-link;
	@include a-link;
}


// selected text, selection background
$selcn: #04A4CC;
$selcn-bg: #444;

// inserted text (<ins> element)
$inserted-text-bg: deepskyblue;

// change 'null' to a value to set these colours
// link colours in main body text
$main-link: $primary;
$main-link-bg: null;

// visited link
$main-vlink: darken($main-link, 20%);
$main-vlink-bg: null;

// hover/focus link, background
$main-hflink: null;
$main-hflink-bg: null;

// active link
$main-alink: null;
$main-alink-bg: null;

// the bar on the left of a blockquote
$blockquote-left-bar: #666;

// form element border (e.g. on inputs)
$form-element-border: #333;

// table colours
$caption-bg: null;

// table head text, bg
$thead: null;
$thead-bg: lighten($main-link, 70%);

// table head text, bg
$tfoot: null;
$tfoot-bg: lighten($main-link, 70%);

// table contents, even row
$tr: null;
$tr-bg: #fff;

// table contents, odd row
$tr-odd: null;
$tr-odd-bg: lighten($main-link, 80%);

// Navigation colours

// horiz-bar

// TODO: turn this into a function!


// lx refers to the menu level at which the .parent is found
$nav-hilite: (
	l0: lighten( hue( secondary ), 40% ),
	l1: lighten( hue( secondary ), 30% ),
	l2: lighten( hue( secondary ), 20% ),
	current:     hue( secondary ),
);

// link colour
$horiz-bar__link: #eee;
// hover/focus/active link
$horiz-bar__link--hfa: #fff;

// link background
$horiz-bar__bg: $main-link;
// hover/focus/active link bg
$horiz-bar__bg--hfa: lighten( $horiz-bar__bg, 10% );

// border colour
$horiz-bar__border--hfa: hue( secondary );

@function nav-hilite-lvl ( $key ) {
  @if not map-has-key($nav-hilite, $key) {
    @warn "Key `#{$key}` not found in $nav-hilite map.";
  }
  @return map-get($nav-hilite, $key);

}

// generate background and hover state
@mixin horiz-bar__item--bg ( $level : null, $h-gap : $gutter * .5, $dir : null ) {

	@if map-has-key( $nav-hilite, $level ) {

		@if horiz == $dir {
			@include two-stripes(
				to bottom,
				lighten( map-get( $nav-hilite, $level ), 10% ), // highlight
				darken( $horiz-bar__bg, 5% ),   // bg colour
				$h-gap
			);
		}
		@else {
			@include two-stripes(
				to right,
				lighten( map-get( $nav-hilite, $level ), 10% ), // highlight
				darken( $horiz-bar__bg, 10% ),   // bg colour
				$h-gap
			);
		}
//		&:hover .horiz-bar-menu__link {
//			@include two-stripes(
//				to right,
//				saturate( lighten( map-get( $nav-hilite, $level ), 10%), 10% ),
//				saturate( $horiz-bar__bg, 10% ),   // bg colour
//				$gutter * .5
//			);
//		}

	}
	@else {
		background: inherit;
	}
}

$sidebar-link:	$main-link;
$sidebar-bg:	$body-bg;
$sidebar-bg-h:	darken( $body-bg, 2.5% );

