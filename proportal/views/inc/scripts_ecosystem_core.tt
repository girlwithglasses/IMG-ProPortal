/* jshint strict: true */
/* globals d3:false, d3Kit:false */

/*
(function chart4() {

  // Various accessors that specify the four dimensions of data to visualize.
  function x(d) { return d.income; }
  function y(d) { return d.lifeExpectancy; }
  function radius(d) { return d.population; }
  function color(d) { return d.region; }

  // Chart dimensions.
  var margin = {top: 5.5, right: 19.5, bottom: 12.5, left: 39.5},
      width = 960,
      height = 500 - margin.top - margin.bottom;

  // Various scales and distortions.
  var xScale = d3.fisheye.scale(d3.scale.log).domain([300, 1e5]).range([0, width]),
      yScale = d3.fisheye.scale(d3.scale.linear).domain([20, 90]).range([height, 0]),
      radiusScale = d3.scale.sqrt().domain([0, 5e8]).range([0, 40]),
      colorScale = d3.scale.category10().domain(["Sub-Saharan Africa", "South Asia", "Middle East & North Africa", "America", "Europe & Central Asia", "East Asia & Pacific"]);

  // The x & y axes.
  var xAxis = d3.svg.axis().orient("bottom").scale(xScale).tickFormat(d3.format(",d")).tickSize(-height),
      yAxis = d3.svg.axis().scale(yScale).orient("left").tickSize(-width);

  // Create the SVG container and set the origin.
  var svg = d3.select("#chart4").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // Add a background rect for mousemove.
  svg.append("rect")
      .attr("class", "background")
      .attr("width", width)
      .attr("height", height);

  // Add the x-axis.
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  // Add the y-axis.
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

  // Add an x-axis label.
  svg.append("text")
      .attr("class", "x label")
      .attr("text-anchor", "end")
      .attr("x", width - 6)
      .attr("y", height - 6)
      .text("income per capita, inflation-adjusted (dollars)");

  // Add a y-axis label.
  svg.append("text")
      .attr("class", "y label")
      .attr("text-anchor", "end")
      .attr("x", -6)
      .attr("y", 6)
      .attr("dy", ".75em")
      .attr("transform", "rotate(-90)")
      .text("life expectancy (years)");

  // Load the data.
  d3.json("nations.json", function(nations) {

    // Add a dot per nation. Initialize the data at 1800, and set the colors.
    var dot = svg.append("g")
        .attr("class", "dots")
      .selectAll(".dot")
        .data(nations)
      .enter().append("circle")
        .attr("class", "dot")
        .style("fill", function(d) { return colorScale(color(d)); })
        .call(position)
        .sort(function(a, b) { return radius(b) - radius(a); });

    // Add a title.
    dot.append("title")
        .text(function(d) { return d.name; });

    // Positions the dots based on data.
    function position(dot) {
      dot .attr("cx", function(d) { return xScale(x(d)); })
          .attr("cy", function(d) { return yScale(y(d)); })
          .attr("r", function(d) { return radiusScale(radius(d)); });
    }

    svg.on("mousemove", function() {
      var mouse = d3.mouse(this);
      xScale.distortion(2.5).focus(mouse[0]);
      yScale.distortion(2.5).focus(mouse[1]);

      dot.call(position);
      svg.select(".x.axis").call(xAxis);
      svg.select(".y.axis").call(yAxis);
    });
  });
})();

*/

function make_chart_two( root, cats ){

    "use strict";

    function PartitionBrowser(){

        var events = ['click'];
        var chartlet = d3Kit.Chartlet( enter, update, exit, events );

        function enter(selection, done) {


        }

        function update(selection, done) {


        }

        function exit(selection, done) {


        }
        return chartlet;
    }


    // new chart object
    var chart = new d3Kit.Skeleton('#ecosystem', {
//        margin: { top: 100, right: 100, bottom: 100, left: 100 },
		margin: { top: 0, right: 0, bottom: 0, left: 0 },
//.getBoundingClientRect()
        initialWidth : parseInt( d3.select('#ecosystem').style('width'), 10 ),
        initialHeight : 600,
    })
    .resizeToFitContainer('width')
    .autoResize('width')
//		  .on('resize', draw)
//		  .on('data', draw)
//		  .on('click', click)

    , all_cats = ['all'].concat( cats, [ 'taxon' ] )

    , cf = crossfilter( root )

    , by_genome_type = cf.dimension( function(d) { return d.genome_type; } )

    , by_spp_subset = cf.dimension( function(d) {
        if ( 'metagenome' === d.genome_type ) {
            return 'metagenome';
        }
        var str = 'prochlor';
        if ( d.taxon_display_name.toLowercase().indexOf('synechococcus') > -1 ) {
            str = 'synech';
        }
        if ( 'Bacteria' !== d.domain ) {
            str += '_phage';
        }
        return str;
/*
        return 'metagenome' === d.genome_type
        ?   d.genome_type
        :   'Bacteria' === d.domain
            ?   d.genus.toLowercase()
            :   // does the taxon name contain synecho / prochloro?
                d.taxon_display_name.toLowercase().indexOf('prochlorococcus') > -1
                ? 'prochlor_phage'
                : d.taxon_display_name.toLowercase().indexOf('synechococcus') > -1
                    ?   'synech_phage'
                    : 'isolate';
*/
    })

    , partition = d3.layout.partition()
        .value(function(d) { return 1; })
        .sort( d3.ascending() )
        .children( function(d) { return d.values; } )

    , tree = partition.nodes( root )

//    , xScale = d3.scale.linear()
//        .range([ 0, chart.getInnerWidth() ])
   , xScale = d3.scale.ordinal()
       .domain(all_cats)
       .rangeBands([0, chart.getInnerWidth() ])

//    , yScale = d3.fisheye.scale(d3.scale.linear)
    , yScale = d3.scale.linear()
        .range([0,chart.getInnerHeight()])

    , xAxis = d3.svg.axis()
        .scale(xScale)
        .orient("bottom")

    , yAxis = d3.svg.axis()
        .scale(yScale)
        .orient("left")
//        .tickSize( -chart.getInnerWidth() )

    , min_x_width = 100

    , offset = 40

    , tip = d3.tip()
        .attr('class', 'd3-tip')
        .direction(function(d) {
        	if ( d.children ) {
        		return 'e';
        	}
        	return 'w';
        })
        .offset([0, 0])
        .html(function(d) {
            if (d.taxon_display_name) {
                return d.taxon_display_name;
            }
            return d.key + ', ' + ( d.value || d.values.length );
        })

    , ky = chart.getInnerHeight()
    , layers = chart.getLayerOrganizer()
    , g
    , w = chart.getInnerWidth()
    , h = chart.getInnerHeight()

    , gts = by_genome_type.group().reduceCount().top(Infinity)

    , subsets = by_spp_subset.group().reduceCount().top(Infinity)

    ;

    layers.create([ 'bg', 'partition', {'axes': ['x','y'] } ]);
/**
    layers.create([ 'nav' ]);
    layers.get('nav')
        .append('rect')
        .attr('class','top')
        .attr('width',chart.width() )
        .attr('height',chart.options().margin.top)
        .attr('x',0)
        .attr('y',0);
    layers.get('nav')
        .append('rect')
        .attr('class','bottom')
        .attr('width',chart.width() )
        .attr('height',chart.options().margin.bottom)
        .attr('x',0)
        .attr('y',chart.height() - chart.options().margin.bottom);
    layers.get('nav')
        .append('rect')
        .attr('class','left')
        .attr('width',chart.options().margin.left)
        .attr('height',chart.height() )
        .attr('x',0)
        .attr('y',0);
    layers.get('nav')
        .append('rect')
        .attr('class','right')
        .attr('width',chart.options().margin.right)
        .attr('height',chart.height())
        .attr('x',chart.width() - chart.options().margin.right )
        .attr('y',0)
        .fill('#fff');
*/
    // Add a background rect for mousemove.
    layers.get('bg')
    .append("rect")
      .attr("class", "background")
      .attr("width", chart.getInnerWidth() )
      .attr("height", chart.getInnerHeight() );

    // Add the x-axis.
    layers.get('axes.x')
      .attr("transform", "translate(0," + chart.getInnerHeight() + ")")
      .call(xAxis);

    // Add the y-axis.
    layers.get('axes.y')
       .call(yAxis);

//    layers.create('partition');
    chart.getRootG().call(tip);

    chart.on('data', function(){
        console.log('event data triggered!');
        draw();
    });

/**
    chart.getRootG().on('mousemove',function(){
//        console.log('event mousemove triggered!');
        var mouse = d3.mouse(this);
        layers.get("axes.y").call(yAxis);
    });
*/
    chart.data( tree );

    chart.on('resize', function(dim){
        // [width, height, innerWidth, innerHeight]
        console.log('event resize triggered; dimensions: [' + dim.join(", ") + ']' );
        resize(dim);
    });

    /*
        Update nodes:

        @param x -- x offset
        @param y -- y offset

        Assumes xScale and yScale are already set

    */

    function update_nodes( x, y ) {
        var t = g
            .transition()
            .duration( 750 )
            .attr("transform", function(d) {
/**
				// for debugging
                if ( d.depth < 5 ) {
                    console.log('looking at ' + all_cats[ d.depth ] + ' ' + d.key);
                    console.log('new coords: ' + xScale( all_cats[ d.depth ] )
                        + ',' + yScale( d.x ) );
                }
*/
                return "translate(" + ( xScale( all_cats[ d.depth ] ) - x ) + "," + ( yScale(d.x) - y ) + ")";
            });

        t.select("rect")
            .attr('width', xScale.rangeBand() )
            .attr("height", function(d) {
                return yScale( d.dx );
            });

        t.select("text")
            .attr("transform", offset_txt)
            .style("opacity", function(d) { return yScale( d.dx ) > 12 ? 1 : 0; });
    }

    /*	resizing */
    function resize(dim) {
        // [width, height, innerWidth, innerHeight]
        // update scales
        xScale.rangeBands([ 0, chart.getInnerWidth() ]);

        console.log('inner width: ' + chart.getInnerWidth() );
        console.log('rangeband: ' + xScale.rangeBand() );

        // update axes
//        yAxis.tickSize( -chart.getInnerWidth() );

        layers.get('axes.x').call(xAxis);
        layers.get('axes.y').call(yAxis);

        // update contents
        update_nodes( 0, 0 );
    }

    function click_me(d) {
        if ( ! d.children ) {
			/* this is a leaf node. Display the sample information */
			update_sample_info( d );
            return;
        }
        console.log('Clicked on ' + d.key + '!!');
        var t_off = 0
        , b_off = 0
        // x axis total range
        , kx = (d.y ? chart.getInnerWidth() - offset : chart.getInnerWidth() ) / (1 - d.y)
        , y_offset;

        if ( 1 === d.dx ) {
            console.log('full size');
        }
        else if ( ! d.x ) {
            console.log('top notch');
            b_off = offset / 2;
        }
        else {
            var total = d.x + d.dx;
            console.log('We have an offset; pos+extent = ' + total.toFixed(3) );

            if ( 1 == total.toFixed(3) ) {
                console.log('bottom feeder');
                t_off = offset / 2;
            }
            else {
                console.log('middle ground');
                b_off = offset / 2;
                t_off = offset / 2;
            }
        }

        // update the scales
        // y axis total range
        ky = ( chart.getInnerHeight() - b_off - t_off ) / d.dx;

        if ( ky >= chart.getInnerHeight() ) {
            yScale.range([ 0, ky ]);
        }

        xScale.rangeBands([ chart.getInnerWidth() - kx, chart.getInnerWidth() ]);

        console.log('range band: ' + xScale.rangeBand() + '; extent: ' + xScale.rangeExtent().join(', ') );
        console.log('d.x: ' + d.x + '; d.dx: ' + d.dx + '; ky = ' + ky + '; top: ' + top);

        console.log('scaled d.x: ' + yScale(d.x)
            + '; d.dx: ' + yScale(d.dx)
            + '; top: ' + t_off
            + '; bottom: ' + b_off
        );

        y_offset = yScale( d.x ) - t_off;

        // update axes
        layers.get('axes.x').call(xAxis);
        layers.get('axes.y').call(yAxis);

        // update the chart items
        var tform = d3.transform(d3.select(this).attr('transform'));
        console.log('clicked node ' + d.key + '; current transform: ' + tform.translate );
        // chart.getInnerWidth() / root.dx;
//			kx = (d.y ? chart.getInnerWidth() - offset : chart.getInnerWidth() ) / (1 - d.y);
        // h / 1
        update_nodes( 0, y_offset );
        d3.event.stopPropagation();
    }

    /* create the initial chart */
    function draw() {
        console.log('running event draw!');

        // bind data
        g = layers.get('partition').selectAll(".node").data( tree )
        // 'enter' event
        .enter()
            .append("g")
            .attr('class','node')
            .attr("transform", function(d) {
               return "translate(" + xScale( all_cats[ d.depth ] ) + "," + yScale(d.x) + ")";
           })
          .on('click', click_me)
          .on('mouseover', tip.show)
          .on('mouseout', tip.hide)
        ;

        g.append("rect")
          .attr('width', xScale.rangeBand() )
          .attr("height", function(d) { return yScale( d.dx ); })
          .attr("class", function(d) { return d.children ? "parent" : "child"; });

        g.append("text")
          .attr("transform", offset_txt )
          .attr("dy", ".35em")
          .style("opacity", function(d) { return yScale( d.dx ) > 12 ? 1 : 0; })
          .text(function(d) { return d.taxon_display_name || d.key; });
    }

    function filter() {
        console.log('running filter event');




        g.exit()
            .remove();

    }

	function update_sample_info( d ) {
		d3.select('#info')
			.attr('class','init_done');
		d3.selectAll('.sample_details')
			.style('display','none');
		d3.select( '#taxon_oid_' + d.taxon_oid )
			.style('display', 'block');
	}

    function offset_txt(d) {
        // offset text and vertically centre
        return "translate(8," + yScale( d.dx ) / 2 + ")";
    }

    function add_filters() {
//        d3.selectAll('#filters a')
//            .


    }

} // end make_chart_two

