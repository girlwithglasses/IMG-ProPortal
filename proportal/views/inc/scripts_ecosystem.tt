[%	USE JSON.Escape( convert_blessed => 1 );

	scr_arr =  [
		'/bower/d3/d3.min.js',
		'/bower/d3kit/dist/d3kit.min.js',
		'/bower/d3-tip/index.js',
		'/bower/crossfilter/crossfilter.min.js',
#		'/d3-parsets/d3.parsets.js',
#		'/d3-plugins/fisheye/fisheye.js',
#		 '/d3.chart.layout.hierarchy/d3.chart.layout.hierarchy.min.js'
	];
	FOREACH s IN scr_arr;
		'<script type="text/javascript" src="' _ s _ '"></script>';
	END;
%]
<style type="text/css"><!--
rect {
  stroke: #eee;
  fill: #aaa;
  fill-opacity: .8;
}
.background {
	fill: none;
}

.axes-layer path, .axes-layer line {
  fill: none;
  stroke: #fff;
  shape-rendering: crispEdges;
}

rect.parent {
  cursor: pointer;
  fill: steelblue;
}
.dimension { cursor: ns-resize; }
.category { cursor: ew-resize; }
.dimension tspan.name { font-size: 1.5em; fill: #333; font-weight: bold; }
.dimension tspan.sort { fill: #000; cursor: pointer; opacity: 0; }
.dimension tspan.sort:hover { fill: #333; }
.dimension:hover tspan.name { fill: #000; }
.dimension:hover tspan.sort { opacity: 1; }
.dimension line { stroke: #000; }
.dimension rect { stroke: none; fill-opacity: 0; }
.dimension > rect, .category-background { fill: #fff; }
.dimension > rect { display: none; }
.category:hover rect { fill-opacity: .3; }
.dimension:hover > rect { fill-opacity: .3; }
.ribbon path { stroke-opacity: 0; fill-opacity: .5; }
.ribbon path.active { fill-opacity: .9; }
.ribbon-mouse path { fill-opacity: 0; }

.category-0 { fill: #1f77b4; stroke: #1f77b4; }
.category-1 { fill: #ff7f0e; stroke: #ff7f0e; }
.category-2 { fill: #2ca02c; stroke: #2ca02c; }
.category-3 { fill: #d62728; stroke: #d62728; }
.category-4 { fill: #9467bd; stroke: #9467bd; }
.category-5 { fill: #8c564b; stroke: #8c564b; }
.category-6 { fill: #e377c2; stroke: #e377c2; }
.category-7 { fill: #7f7f7f; stroke: #7f7f7f; }
.category-8 { fill: #bcbd22; stroke: #bcbd22; }
.category-9 { fill: #17becf; stroke: #17becf; }

.tooltip {
  background-color: rgba(242, 242, 242, .6);
  position: absolute;
  padding: 5px;
}
--></style>
<script type="text/javascript">
(function ready(){
[%
	INCLUDE 'inc/scripts_ecosystem_core.tt';
%]
	function fn(){
		var tree={'key':'all','values':d3.nest()
[%			FOREACH c IN results.class_types;
%]			  .key( function(d){ return d.[% c %]; } )
[%			END;
%]
//			.rollup( function(leaves){ return leaves.length; })
			.entries( getJson() )}
		,class_types=[%
	results.class_types.json;
		%],filters=[%
	IF data_filters && data_filters.all;
		data_filters.json;
	ELSE;
		'{}';
	END;
%]		;

		make_chart_two(tree,class_types);
//		  make_chart_tree( getJson() );
	}

	function getJson() {
		return [%
	IF results.array && results.array.size > 0;
		results.array.json;
	ELSE;
		'[]';
	END;
	';';
%]	  }
	if (document.readyState !== 'loading'){
		fn();
	} else if (document.addEventListener) {
		document.addEventListener('DOMContentLoaded', function(){
			fn();
		});
	} else {
		document.attachEvent('onreadystatechange', function() {
			if (document.readyState !== 'loading'){
				fn();
			}
		});
	}
}());
</script>
