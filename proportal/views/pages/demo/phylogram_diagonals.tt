[%	WRAPPER 'inc/page_wrapper.tt';
	title = 'Phylogram';
%]
	<style>
		.vis { height: 500px; width: 100% }
		.vis form {
			position: absolute;
			bottom: 0;
			right: 0;
		}
		.vis h4 {
			display: none;
		}

		.circle {
			fill: white;
			stroke: blueviolet;
		}

		.expandable .circle {
			fill: blueviolet;
		}

		.rootable {
			fill: red;
		}

		.node text {
			display: none;
		}

		.shifty .circle {
			fill-opacity: 0;
		}

		.shifty .rootable {
			fill-opacity: 1;
		}

		.interaxis__circle, .interaxis__line {
			stroke: steelblue;
			stroke-width: 1px;
			fill: none;
		}

		.active {
			stroke: red;
		}

		.tick {
			opacity: 0.4;
		}
		.tick:hover {
			opacity: 0.8;
		}
		.axis line {
			stroke: steelblue;
		}
		.axis .domain {
			stroke: gray;
		}

		.c.axis {
			fill: none;
			stroke: #999;
			stroke-dasharray: 1,4;
		}

		.diag_demo {
			float: left;
			padding: .75rem;
			border: 1px solid #666;
			margin: .75rem;
		}
		.diag_demo p {
			text-align: center;
			margin-bottom: 0;
		}

		svg text {
			pointer-events: all;
		}

		text {
			font-size: .75rem;
			cursor: pointer;
		}

		.pt {
			fill: none;
			stroke: magenta;
			stroke-width: 1px;
			pointer-events: all;
		}
		.pt:hover {
			fill: black;
			stroke-width: 3px;
			stroke-opacity: 0.5;
			stroke: deepskyblue;
		}

		.centre {
			stroke: magenta;
			fill: white;
			opacity: 1;
		}

		.voronoi path {
			fill: none;
			stroke-width: .5px;
			stroke: steelblue;
		}

		#scroller_text text {
			font-size: 2rem;
			stroke: black;
		}

		.interaxis__label-bg {
			stroke-width: 10px;
			stroke-linejoin: round;
			stroke: black;
			fill: black;
		}

		.interaxis__label {
			stroke: white;
		}

		marker {
			fill: none;
			stroke: none;
		}

	</style>


	<h2>scrolling text</h2>
	<div id='scroller_text'></div>

	<h2>Diagonals</h2>
	<div id="diagonals" class="cf"></div>


	<h2>Phylogram and Cladogram Demos</h2>

    <h3>cluster.cartesian</h3>
    <div id="cluster-cartesian" class="vis"></div>

    <h3>tree.cartesian</h3>
    <div id="tree-cartesian" class="vis"></div>

    <h3>cluster.radial</h3>
    <div id="cluster-radial" class="vis"></div>

    <h3>tree.radial</h3>
    <div id="tree-radial" class="vis"></div>

	<h2>variable branch lengths</h2>

    <h3>cluster.cartesian</h3>
    <div id="cluster-cartesian-vbl" class="vis"></div>

    <h3>tree.cartesian</h3>
    <div id="tree-cartesian-vbl" class="vis"></div>

    <h3>cluster.radial</h3>
    <div id="cluster-radial-vbl" class="vis"></div>

    <h3>tree.radial</h3>
    <div id="tree-radial-vbl" class="vis"></div>

<script src="/js/d3.min.js"></script>
<script src="/js/koto.js"></script>
<script src="/js/koto/ClusterCartesian.js"></script>
<script src="/js/koto/ClusterRadial.js"></script>
<script src="/js/koto/TreeCartesian.js"></script>
<script src="/js/koto/TreeRadial.js"></script>
<script src="/js/koto/Form.js"></script>
<script>
	(function() {

	var scrollable = function ( selection, parent_fn ) {

		selection.on('mouseover', function(){
			// wait for two seconds, then scroll text
			var el = d3.select( this )
			, bbox = this.getBBox()
			, end = parent_fn( this ).clientWidth - el.attr('x') - bbox.width
			, d = el.datum() || {}
			;

			d.__original_x = el.attr('x');
			el.datum( d );

			el.transition()
				.delay(2000)
				.duration( 10 * Math.abs(end) )
				.ease('linear')
				.attr('x', end);
		})
		.on('mouseout', function(){
			// cancel the transition
			console.log('mouseout!');
			var el = d3.select( this );
			el.interrupt()
//				.transition();
//			el.transition()
				.transition()
				.attr('x', el.datum().__original_x );
		});
	};

	/** TEXT SCROLLER */
		var long_text_string = '( ( ( ( ( ( ( ( 2553536569:0.04806, 2553547864:0.02318) :0.13790, ( ( 2607817870:0.06292, ( ( 637686994:0.00904, 2607361738:0.00877) :0.00237, ( 2607811795:0.00000, 2624154139:0.00000) :0.01417) :0.04807) :0.11480, ( ( ( ( ( ( 640087144:0.00000, 2608168136:0.00000)'
		, txt_el = d3.select("#scroller_text")
		.append('svg')
		.append('text')
			.text( long_text_string )
			.classed('scrolling', true)
			.attr('text-anchor', 'left')
			.attr('x', 5)
			.attr('y', 55)
		, get_parent = function( e ) {
			return e.parentNode.parentNode;
		}
//		, d = txt_el.datum() || {}
		;

	scrollable( txt_el, get_parent );


		var control_schema = {
			type: "object",
			properties: {
				diagonal: {
					name: 'diagonal',
					type: 'enum',
					title: 'Branch type',
					control: 'select',
					enum: [ 'direct', 'l_shape', 'l_shape_2', 'dogleg', 'dogleg_2', 'curved' ],
					enum_map: {
						'direct': 'direct (diagonal) line',
						'l_shape': 'L-shape',
						'l_shape_2': 'L-shape, alternate',
						'dogleg': 'dogleg',
						'dogleg_2': 'dogleg, alternate',
						'curved': 'curved'
					},
					default: 'curved'
				}
				, radius: {
					name: 'radius',
					type: 'number',
					title: 'Node radius',
					control: 'range',
					minimum: 0,
					maximum: 10,
					step: 0.5
				}
				, levelGap: {
					name: 'levelGap',
					type: 'enum',
					title: 'Space between tree levels',
					control: 'select',
					enum: [ 'length', 'auto', 50, 100 ],
					enum_map: {
						'length': 'length-based gaps',
						'auto': 'fill space',
						50: '50px',
						100: '100px'
					}
				}
				, collapsible: {
					name: 'collapsible',
					type: 'number',
					title: 'Toggle tree level',
					control: 'plus_minus',
					minimum: 0,
					maximum: 100,
					step: 1
				}

				, sortable: {
					name: 'sortable',
					type: 'enum',
					title: 'Sort ...',
					control: 'select',
					enum: [ '_ASC_', '_DESC_' ],
					enum_map: {
						'_ASC_': 'Ascending',
						'_DESC_': 'Descending'
					}
				}
			}
		};

		// some lines

		var points = { source: { x: 10, y: 10 }, target: { x: 110, y: 140 } }
		, zero = { x:0, y:0, r:0, id: 'zero' }
		// convert cartesian to polar coords
		, c2p = function(obj) {
			var d = Math.sqrt( obj.x*obj.x + obj.y*obj.y )
			, a = Math.atan2( obj.y, obj.x )
			;
			return { angle: a*(180/Math.PI), distance: d, x: a*(180/Math.PI), y: d };
		}
		, p2c = function(obj) {
            var theta = obj.x;
            return [obj.y * Math.cos(theta), obj.y * Math.sin(theta)];
        }
//		, p_types = d3_svg_diagonal_extras.right_angle().valid_path_types()
		, diag_div = d3.select('#diagonals')
		, std_proj = function(pt){ return [pt.y,pt.x]; }
		, radial_proj = function(pt){ return [ pt.y, pt.x / 180 * Math.PI ]; }
		, alt_radial_proj = function(pt){
			var a = pt.x / 180 * Math.PI;
			return [pt.y * Math.cos(a), pt.y * Math.sin(a)];
		}
		;
/**
		, add_radial_demo = function( el ) {

			var radius = 5;

			d3.chart('Diagonals', {

				redraw: function() {
					this.draw( this.data );
				},

				initialize: function( options ){
					var chart = this
					, draggable = d3.behavior.drag()
					.origin(function(d) { return d; })
					.on("drag", function(d){
						d3.select(this)
							.attr('cx', d3.event.x)
							.attr('cy', d3.event.y)
							;
					})
					.on('dragend', function(d){
						// redraw the chart
						chart.data[d.id].new_x = d3.select(this).attr('cx');
						chart.data[d.id].new_y = d3.select(this).attr('cy');
						chart.redraw();
					});

					if ( ! options ) {
						options = {};
					}

					chart.options = {
						// get the chart dimensions from the container
						width: options.width || chart.base.node().parentNode.clientWidth,
						height: options.height || chart.base.node().parentNode.clientHeight
					};

					chart.layers = {
						base: chart.base.append('g'),
						vis: chart.base.append('g')
					};

					chart.layers.legend = chart.layers.base.append('g')
						.classed('legend', true)
						.attr('transform','translate(20,50)');

					chart.layers.axis  = chart.layers.vis.append('g').classed('axes', true);
					chart.layers.lines  = chart.layers.vis.append('g').classed('lines', true);

					chart.layers.points = chart.layers.vis.append('g').classed('points',true);

					chart.layer("points", chart.layers.points, {
						dataBind: function( data ) {
							// the data is coords.source and coords.target
							console.log(data);
							return this.selectAll('.pt').data([ data.source, data.target, data.zero ], function(d){ return d.id; });
						},
						insert: function() {
							return this.append("circle")
								.classed("pt", true);
						},
						events: {
							enter: function() {
								// point
								this.attr('cx', function(d){ return d.x; })
									.attr('cy', function(d){ return d.y; })
									.attr('r', radius)
									.attr('id', function(d){ return d.id; })
									.call( draggable );
// 								this.append('circle')
// 									.classed('centre', true)
// 									.attr('radius', 3);
							}
						}
					});

					chart.layer("axis", chart.layers.axis, {
						dataBind: function( data ) {
							// the data is coords.source and coords.target
							console.log('axis, dataBind function: data is');
							console.log(data);
							return this.selectAll('.c_axis').data([ data.source, data.target ], function(d){ return d.id; });
						},
						insert: function() {
							return this.append("circle")
								.classed("c_axis", true);
						},
						events: {
							update: function(){
					//			this.remove();
								console.log('update: selection length: ' + this.size() );
								console.log( this );
							},
							'update:transition': function() {
								console.log('update:transition: selection length: ' + this.size() );
								this
								//	.transition()
									.duration( 750 )
									.attr('r', 0);
							},
							enter: function() {
								console.log('enter: selection length: ' + this.size() );
								console.log( this );
								// axis circle
								this.attr('r',0);
							},
							'merge:transition': function() {
								console.log('merge: selection length: ' + this.size() );
								console.log( this );
								this
									.duration( 750 )
									.attr('r', function(d){
										return d.r;
									});
							},
							exit: function() {
								console.log('exit: selection length: ' + this.size() );
								console.log( this );
								this.remove();
							},
							'exit:transition': function() {
								console.log('exit: selection length: ' + this.size() );
								console.log( this );
								this.remove();
							}
						}
					});

					chart.layer('lines', chart.layers.lines, {
						dataBind: function(data) {
							// data is the different line types
							return this.selectAll('path').data(
								d3_svg_diagonal_extras.right_angle().valid_path_types()
							, function(d){ return d; });
						},
						insert: function(){
							return this.append('path');
						},
						events: {
							enter: function(){
								this.attr('class', function(d){ return 'link ' + d; })
								.attr('d', function(d){
									return d3_svg_diagonal_extras.radial()
									.path_type( d )
									.draw({
										source: c2p(chart.data.source),
										target: c2p(chart.data.target)
									});
								});
							},
							'merge:transition': function(){


								this
									.duration( 750 )
									.attrTween('d', function(d){
										var old = { source: { x: chart.data.source.x, y: chart.data.source.y }, target: { x: chart.data.target.x, y: chart.data.target.y } }
										, not_old = { source: { x: chart.data.source.x, y: chart.data.source.y }, target: { x: chart.data.target.x, y: chart.data.target.y } }
										, interpolate;

										['target','source'].forEach( function(i) {
											['x','y'].forEach( function(j) {

												if ( chart.data[i]['new_' + j] ) {
													not_old[i][j] = chart.data[i]['new_' + j];
													chart.data[i][j] = chart.data[i]['new_' + j];
													delete chart.data[i]['new_' + j];
												}
											})
										});

										interpolate = d3.interpolateObject(old, not_old );
										return function(t) {
											 old = interpolate(t);
								//		console.log( this.attr('d') );
											 return d3_svg_diagonal_extras.radial()
											.path_type( d )
											.draw({ source: c2p(old.source), target: c2p(old.target) });
										};
// 									.attrTween(function(d){
// 								// get current coords, transition them to new coords
//
//
// d3.interpolateObject
//
//
// function arcTween(transition, newAngle) {
//   transition.attrTween("d", function(d) {
//     var interpolate = d3.interpolate(d.endAngle, newAngle);
//     return function(t) {
//       d.endAngle = interpolate(t);
//       return arc(d);
//     };
//   });
// }


								});
							},
							'exit:transition': function(){
								this.remove();
							}
						}
					});

					chart.layer('legend', chart.layers.legend, {
						dataBind: function(data) {
							// data is the different line types
							return this.selectAll('text').data(
								d3_svg_diagonal_extras.right_angle().valid_path_types()
							);
						},
						insert: function(){
							return this.append('text');
						},
						events: {
							enter: function(){
								this.attr('x', 20)
									.attr('y', function(d,i){
										return 20 * i;
									})
									.text(function(d){
										return d;
									})
									.on('mouseover', function(d){
										d3.select(this).classed('active', true);
										d3.select('.link.' + d)
											.classed('active', true)
											.each( function(){
												this.parentNode.appendChild(this);
											});
									})
									.on('mouseout', function(d){
										d3.select(this).classed('active', false);
										d3.select('.link.' + d)
											.classed('active', false);
									});
							}
							, merge: function(){

								chart.set_layout();

							}
						}
					});
				},

				set_layout: function(){
					var chart = this,
					bbox = chart.layers.legend.node().getBBox();
					console.log('Running chart set layout');

					// set the chart layout
					chart.layers.legend
						.transition()
						.attr('transform', 'translate(20,50)');

					chart.layers.vis
						.transition()
						.attr('transform', 'translate(' + ( bbox.x + bbox.width + 20 + chart._max_radius ) + ',' + (chart._max_radius+20) + ')' );

				},

				recentre: function( pt, cen ) {
					pt.norm_x = pt.x - cen.x;
					pt.norm_y = pt.y - cen.y;
					return pt;
				},

				transform: function( data ){
					var chart = this;

					// centre the points so zero is [0,0]
					console.log('data before recentre command');
					console.log(data);
					[ data.source, data.target ].forEach( function(d){
						d = chart.recentre( d, data.zero );
					});
					console.log('data post-recentre');
					console.log(data);

					// work out the size of the visualisation and the offset
					// the centre will be chart.data.zero
					// Math.sqrt( d.x*d.x + d.y*d.y )
					chart._max_radius = d3.max( [ data.source, data.target ], function(d){
//						d = chart.recentre( d, data.zero );
						d.r = Math.sqrt( d.norm_x * d.norm_x + d.norm_y * d.norm_y );
						return d.r;
					});

					if ( ! data.source.id ) {
						data.source.id = 'source';
						data.target.id = 'target';
					}

					chart.data = data;

					chart.base.node().setAttribute('viewBox', '0 0 '
						+ chart.base.node().parentNode.clientWidth + ' '
						+ ( chart._max_radius + 20 ) * 2 );

					chart.options.width = chart.base.node().parentNode.clientWidth;
					chart.options.height = ( chart._max_radius + 20 ) * 2;

// 					chart.off("transform:stash").on("transform:stash", function() {
// 					  nodes.forEach(function(d) {
// 						d.x0 = d.x;
// 						d.y0 = d.y;
// 					  });
// 					});

					return chart.data;
				}

			});

			var s = el.append('div')
				.classed('resizable', true)
				.append('svg')
				.chart('Diagonals')
			;

			s.draw({ source: { x: 30, y: 50, id: 'source' }, target: { x: 70, y: 70, id: 'target'}, zero: { x:0, y:0, r:0, id: 'zero' } });


		}

		, add_demo_diag = function( d, el, radial ) {
			var s = el.append('svg')
				.attr('height', 150)
				.attr('width', 120)
			, coords = { source: {}, target: {} }
			, g;
			if ( radial ) {
				// remap the points to make the diagonals more interesting
				[ 'source', 'target' ].forEach(function(o){
					coords[o].x = points[o].x - zero.x;
					coords[o].y = points[o].y - zero.y;
				})
			}
			else {
				coords = points;
			}
			el.append('p')
				.text( d );
			g = s.append('g')
			.attr('transform', function(d){
				return 'translate(' + ( radial ? zero.x : '0' ) + ',' + ( radial ? zero.y : '0' ) + ')';
			});
			g.append('circle')
				.attr('cx', coords.source.x)
				.attr('cy', coords.source.y)
				.attr('r', 2)
				.classed('circle', true);
			g.append('circle')
				.attr('cx', coords.target.x)
				.attr('cy', coords.target.y)
				.attr('r', 2)
				.classed('circle', true);

			if ( radial ) {
				g.append('circle')
				.classed('c_axis', true)
				.attr('r', function(d){
					return Math.sqrt( coords.source.x*coords.source.x + coords.source.y*coords.source.y );
				});
				g.append('circle')
				.classed('c_axis', true)
				.attr('r', function(d){
					return Math.sqrt( coords.target.x*coords.target.x + coords.target.y*coords.target.y );
				});
			}

			g.append('path')
			.classed('link', true)
			.attr('d', function(d){
				var diag;
				if ( ! radial ) {
					diag = 'curved' === d
						? d3.svg.diagonal()
						: d3_svg_diagonal_extras.right_angle()
							.path_type( d )
						;
					return diag( coords );
				}

				if ( 'curved' === d ) {
					diag = d3.svg.diagonal.radial()
						.projection(function(d) {
						return [d.y, d.x / 180 * Math.PI];
// 							var a = d.x / 180 * Math.PI;
// 							return [d.y * Math.cos(a), d.y * Math.sin(a)];
//							return [ d.x - 90, d.y ];
						});
//					return diag(coords);
				}
				else {
					diag = d3_svg_diagonal_extras.radial()
						.path_type( d );
				}
				return diag({ source: c2p(coords.source), target: c2p(coords.target) });
			});
			return;
		};
//		p_types.push('curved');

		diag_div.selectAll('.diag_demo')
			.data( p_types )
		.enter()
			.append('div')
			.classed('diag_demo', function(d) {
				add_demo_diag( d, d3.select( this ) );
				add_demo_diag( d, d3.select( this ), true );
				return true;
			});

		add_radial_demo( diag_div );
*/

        d3.json("/js/phyloviewer.json", function(error, json) {

          var cluster = new KotoClusterCartesian(
          		d3.select("#cluster-cartesian").append("svg")
//            .chart("cluster.cartesian.diagonal")
            	)
              .value("size")
              //.radius(3)
              //.levelGap(100)
              .diagonal( 'l_shape' )
              // .zoomable([0.1, 3])
              .collapsible(5)
              //.duration(200)
              ;

              cluster.draw( json.tree );
        });

        d3.json("/js/phyloviewer.json", function(error, json) {
          var tree = new KotoTreeCartesian(
          	d3.select("#tree-cartesian").append("svg")
				)
              //.value("size")
              .radius(8)
              .levelGap(50)
              .diagonal( 'dogleg' )
              // .zoomable([0.1, 3])
              .collapsible(5)
              //.duration(200)
              ;
              tree.draw( json.tree );
        });

        d3.json("/js/phyloviewer.json", function(error, json) {
			console.log('cluster.radial');
          var radial = new KotoClusterRadial(
          	d3.select("#cluster-radial").append("svg")
          	)
              //.diameter(500)
              //.value("size")
              .radius(6)
              .levelGap(50)
              .diagonal( 'l_shape_2' )
              // .zoomable([0.1, 3])
              .collapsible(5)
              //.duration(200)
              ;
              radial.draw( json.tree );
        });

        d3.json("/js/phyloviewer.json", function(error, json) {
			console.log('tree.radial');
          var radial = new KotoTreeRadial(
          	d3.select("#tree-radial").append("svg")
            	)
              .diameter(500)
              //.value("size")
              .radius(4)
              .levelGap(50)
        //      .diagonal( 'rightAngleRadial' )
              // .zoomable([0.1, 3])
              .collapsible(5)
              //.duration(200)
              ;
              radial.draw( json.tree );
        });

		/** Variable branch length trees! */

	var c = {
		'cluster-cartesian-vbl': KotoClusterCartesian,
		'tree-cartesian-vbl': KotoTreeCartesian,
		'cluster-radial-vbl': KotoClusterRadial,
		'tree-radial-vbl': KotoTreeRadial
	};


	function chart_me( div_id, chart_type ) {
		return function(){
			d3.json("/js/phyloviewer.json", function(error, json) {

				console.log('creating ' + chart_type + ' in ' + div_id);
				var container = d3.select( '#' + div_id )
					.style('height', '800px')
				, svg = container.append('svg')
				, vis = new chart_type( svg )
					.margin({ top:10,left:10,right:10,bottom:10 })
					.radius( 2.5 )
					.diagonal( 'curved' )
					.levelGap( 'length' )
					.max_length( json.max_length )
					.sortable("_ASC_")
					.collapsible(15)
					.duration(1500)
				//	.nodeSize([ 20, 1000 ])

				, form = new KotoForm(
						d3.select( '#' + div_id ).insert('form')
					)
					.schema( control_schema )
					.target(vis)
				;

				form.draw([ 'diagonal', 'levelGap', 'radius', { name:'collapsible', default: 15 } ]);

				vis.draw( json.tree );
			});
		}
	};

	Object.keys( c ).forEach( function(d){
		var f = chart_me( d, c[d] );
		f();
	});

    d3.select("body").on("keydown", function(){
      if (d3.event.shiftKey) {
        console.log('detected a shift key down event!');
        d3.selectAll('svg').classed('shifty', true);
      }
      console.log('pressed a key!');
    });
    d3.select("body").on("keyup", function(){
       d3.selectAll('svg').classed('shifty', false);
    });



/**
        var tbox = d3.select('scroller_text')
        	.append('svg')
        	.append('g')
        	.append('text')
        	.text('very long scrolling text string here! That is another reason to make sure you have some way of dealing with text content.')
        	.on('mouseover', function(){
        		this.


d3.chart("TippedVisualisation", {

	sortable: function( args ){
		return this.attach('vis').sortable( args );
	},

	collapsible: function( args ){
		return this.attach('vis').collapsible( args );
	},

	colors: function( args ){
		return this.attach('vis').colors( args );
	},

	name: function( args ){
		return this.attach('vis').name( args );
	},

	value: function( args ){
		return this.attach('vis').value( args );
	},

	duration: function( args ){
		return this.attach('vis').duration( args );
	},

	zoomable: function( args ){
		return this.attach('vis').zoomable( args );
	},

	margin: function( args ){
		return this.attach('vis').margin( args );
	},

	diagonal: function( args ){
		return this.attach('vis').diagonal( args );
	},

	levelGap: function( args ){
		return this.attach('vis').levelGap( args );
	},

	tooltip: function( args ){

		var func = function(d) {
			return d[ args ] || 'no data for ' + args;
		};
		this.attach('tips').text( func );
	},

	resize: function() {
		this.trigger('change:size');
		if ( this.data ) {
			this.draw( this.data );
		}
	},

	initialize: function( options ) {

	  // attach the charts under a specific name to the parent chart
		this.attach("vis",
			this.base
				.chart( options.chart_type , options.chart )
			);

		var tips_options = {
			layer : this.attach('vis'),
			type : options.tooltip.selector,
			text : options.tooltip.text || function(d) {
				return d.name;
			}
		};

		this.attach('tips',
			d3.select('body')
				.chart('TooltipMixinChart', tips_options )
			);
	}
});


      	d3.json("/js/phyloviewer.json", function(error, json) {

			var container = d3.select("#cladogram")
				.classed('resizable', true)
				.style('height', '800px')
			, opts = {
					name: 'levelGap'
					, enum: [ '100', 'length' ]
					, enum_map: { '100': 'fixed depth', 'length': 'variable depth' }
					, default: 'length'
			}
			, svg = container.append('svg')
			, vis = svg
				.chart("tree.cartesian.diagonal")
				.margin({ top:10,left:10,right:10,bottom:10 })
	//			.height(800)
				.radius( 3 )
				.diagonal( 'vert_horiz' )
				.levelGap( 'length' )
				.max_length( json.max_length )
				.sortable("_ASC_")

			, sel = container.append('button')
				.text('toggle tree layout')
				.on('click', function(){
					var l = 'length';
					if ( 'length' === vis.levelGap() ) {
						l ='auto';
					}
					console.log('detected a click! Length is ' + l );
					vis.levelGap( l );
					vis.draw( json.tree );
				});

		//	sel.on('change', vis.levelGap( this.value ) );

			vis.draw( json.tree );
        });

*/

      }());
    </script>



[%	END; %]
