[%	WRAPPER 'inc/page_wrapper.tt';
	title = self.display_name;
	self = results.function;

	self.db = 'CyCOG';
	self.xref = self.id;

	PROCESS 'inc/generic/attr_value_table.tt';
	PROCESS 'inc/generic/container_macros.tt';

	BLOCK fn_details_cycog_details;

		vers_arr = [];
		FOR v IN self.in_versions;
			vers_arr.push( '<a href="'
			_ link( 'details', { cycog_version => v } )
			_ '">v'_ v _ '</a>' );
		END;

		data_table = {
			class => 'function-details',
			tbody => [
				[ 'CyCOG ID', self.id ],
				[ 'Description', self.description ],
				[ 'CyCOG versions', vers_arr.join(", ") ],
				[ 'Cluster size', self.cluster_size ],
				[ 'Unique Taxa', self.unique_taxa ],
				[ 'Duplication Events', self.duplication_events ],
			]
		};
		attr_value_table( data_table );

	END; # end block

	# Sequence views
	BLOCK fn_details_logo;
%]
	<p><span class="noteToSelf"> Sample image </span></p>
	<img src="/images/sample-cycog-sequence-logo.jpg" alt="Sequence Logo">
[%
	END; # end block


	# Gene list
	BLOCK fn_details_gene_list;

	n_results =  self.cycog_genes.size _ ' gene';
	IF self.cycog_genes.size != 1;
		n_results = n_results _ 's';
	END;
	n_results = n_results _ ' associated with CyCOG:' _ self.id;

		IF results.genes && results.genes.size > 0;

			data_table = results.table;
			data_table.id = 'cycog_gene_list';
			data_table.class = 'cycog_gene_list';
			# data_table.caption = n_results;
			data_table.tbody = results.genes;

			PROCESS 'inc/generic/table.tt';
		END;
	END; # end block


	# page layout

	article_title = 'CyCOG:' _ self.id;
	subtitle = self.description;
	PROCESS 'inc/title/function.tt';

	sections = [{
		id => 'fn_details_cycog_details',
		title => 'CyCOG details',
	},
	{	id => 'fn_details_logo',
		title => 'CyCOG sequence logo',
	},
	{	id => 'fn_details_gene_list',
		title => 'Gene members',
	}];

	layout_page( sections );

	table_arr = [ 'cycog_gene_list' ];
 	PROCESS 'scripts/datatables.tt';

END %]
