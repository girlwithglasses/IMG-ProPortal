[%	scr_arr = [
	'/js/d3.min.js',
	'/js/d3-tip.js',
	'/js/colorbrewer.js',
	'https://cdn.plot.ly/plotly-latest.min.js' ];
	IF scr_arr;
		FOREACH s IN scr_arr;
			'<script src="' _ s _ '"></script>';
		END;
	END;
%]
<script type="text/javascript">
(function ready(){
	var res=[%
	IF results.js.data && results.js.data.size > 0;
		USE JSON.Escape( convert_blessed => 1 );
		results.js.data.json;
	ELSE;
		'{}';
	END;
	';';
%]
/* global d3, getJson */
/*jshint laxcomma: true */

function fn(){

	"use strict";

	var WIDTH_IN_PERCENT_OF_PARENT = 90
	, HEIGHT_IN_PERCENT_OF_PARENT = 80

	, gd3 = Plotly.d3.select('#ecotype')
	.append('div')
	.style({
		width: WIDTH_IN_PERCENT_OF_PARENT + '%',
		'margin-left': (100 - WIDTH_IN_PERCENT_OF_PARENT) / 2 + '%',

		height: HEIGHT_IN_PERCENT_OF_PARENT + 'vh',
		'margin-top': (100 - HEIGHT_IN_PERCENT_OF_PARENT) / 2 + 'vh'
	})

	, colors = {
		'HLI': colorbrewer.Set2[8][0],
		'HLII': colorbrewer.Set3[12][5],
		'LLI': colorbrewer.Set2[8][2],
		'LLII/III': colorbrewer.Set3[12][2], // or colorbrewer.Set3[9]
		'LLIV': colorbrewer.Set3[12][3]
	}
	, gd = gd3.node()
	, figs = []
	, data
	;
	Object.keys(res)
	.sort()
	.forEach(function(e){
		Object.keys(res[e])
		.sort()
		.forEach(function(c){
			figs.push({
				count: Object.keys( res[e][c] ).length,
				label: e + ', clade ' + c,
				clade: c,
				color: colors[c] ? colors[c] : '#C8A2C8'
			});
		});
	});

	data = [{
		type: 'bar',
		orientation: 'h',
		x: figs.map(function(c){
			return c.count;
		}),
		y: figs.map(function(c){
			return c.clade;
		}),
		text: figs.map(function(c){
			return c.label;
		}),
		marker: {
			color: figs.map(function(c){
				return c.color;
			}),
		}
	}];
	Plotly.plot(gd, data, {
		title: 'Ecotype and Clade classification',
		font: {
			size: 16
		},
	}, {displaylogo: false});

	d3.selectAll('.js_vis_loading')
		.remove();

	gd.on('plotly_click', function(data){
		var pts = '';
		alert('Detected a click!');
		for(var i=0; i < data.points.length; i++){
			pts = 'x = '+data.points[i].x +'\ny = '+
				data.points[i].y.toPrecision(4) + '\n\n';
		}
		alert('Closest point clicked:\n\n'+pts);
	});

	window.onresize = function() {
		Plotly.Plots.resize(gd);
	};

}
/* end insert */
	if (document.readyState !== 'loading'){
		fn();
	} else if (document.addEventListener) {
		document.addEventListener('DOMContentLoaded', function(){
			fn();
		});
	} else {
		document.attachEvent('onreadystatechange', function() {
			if (document.readyState !== 'loading'){
				fn();
			}
		});
	}
}());
</script>
