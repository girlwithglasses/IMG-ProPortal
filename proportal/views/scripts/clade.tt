[%	PROCESS 'scripts/dc_datatables_fn.tt';
	USE JSON.Escape( allow_blessed => 1, convert_blessed => 1 );
	scr_arr = [
		'/js/d3.min.js',
		'/js/d3-tip.js',
#		'/code/crossfilter/crossfilter.min.js',
#		'/code/dc.js/dc.min.js',
#		'/code/dc.js/checkbox-menu.js',
#		'/code/dc-addons/dist/tooltip/dc-tooltip-mixin.min.js',
#		'/code/DataTables/datatables.min.js',
		'/js/crossfilter.min.js',
		'/js/dc.min.js',
		'/js/checkbox-menu.js',
		'/js/dc-tooltip-mixin.min.js',
		'/js/datatables.min.js',
#		'https://cdn.datatables.net/v/dt/jqc-1.12.4/jszip-3.1.3/dt-1.10.15/b-1.3.1/b-colvis-1.3.1/b-html5-1.3.1/b-print-1.3.1/cr-1.3.3/fc-3.2.2/fh-3.1.2/r-2.1.1/rg-1.0.0/sc-1.4.2/se-1.2.2/datatables.min.js'
	];
	WRAPPER scripts/pageload_wrapper.tt;

%]
var res=getJson()
, label_h={"pp_subset":[% data_filters.schema.pp_subset.enum_map.json  %]}
, data_table_opts = {
// 	orderFixed: [2, 'asc'],
// 	rowGroup: {
// 		dataSrc: 2
// 	},
[%
	datatable_cols( 'taxon', results.js.table_cols );
	datatable_buttons('taxon_oid');
	datatable_paging( results.js.arr.size ); %]
	deferRender: true,
	data: res.arr,
	select: {
		style: 'multi'
	},
//	scroller: true,
//	scrollY: "20rem"
}
[%#
	# these colours roughly correspond to the standard colours used for Pro. diagrams
	'HLI': colorbrewer.Set2[8][0],
	'HLII': colorbrewer.Set3[12][5],
	'LLI': colorbrewer.Set2[8][2],
	'LLII/III': colorbrewer.Set3[12][2], // or colorbrewer.Set3[9]
	'LLIV': colorbrewer.Set3[12][3]

%]
, colors = {HLI: "#66c2a5", HLII: "#fdb462", LLI: "#8da0cb", 'LLII/III': "#bebada", LLIV: "#fb8072"}
, slug_name = '[% page_slug %]'
, table_id = slug_name + '__table'
, barchart = dc.barChart('#' + slug_name + '__vis')
, rowchart = dc.pieChart('#' + slug_name + '__vis2')
, ndx = crossfilter(res.arr)
, xf_dim = new Object()
, filter_h = new Object()
, selecn = new Object()
, table = $('#' + table_id).DataTable(data_table_opts)
, table_filter_dim = 'pp_subset'
;

[ 'pp_subset', 'clade', 'generic_clade' ].forEach( function(el){
	xf_dim[el] = ndx.dimension( function(d) { return d[ el ]; });
});

add_dynamic_filters( slug_name, [ 'pp_subset' ] );
filter_h.pp_subset.multiple( false );

barchart
.width(768)
.height(480)
.x( d3.scale.ordinal() )
.xUnits( dc.units.ordinal )
.brushOn(false)
.xAxisLabel('Clade', 24 )
.yAxisLabel('Frequency', 24 )
.dimension( xf_dim.generic_clade )
.group( xf_dim.generic_clade.group().reduceCount() )
.colorAccessor(function(d){
	return colors[ d.key ] || '#999'
})
.barPadding(0.1)
.outerPadding(0.05)
.title( function(d){ return d.key + ': ' + d.value + ' genomes'; });
;

rowchart
.width( 300 )
.height( 300 )
.dimension( xf_dim.pp_subset )
.group( xf_dim.pp_subset.group().reduceCount() )
.title( function(d){ return getLabel( 'pp_subset', d.key ) + ': ' + d.value ; });

table
.on( 'select', function ( e, dt, type, indexes ) {
	if ( type === 'row' ) {
		table.rows( indexes ).ids( true ).each(function(e){
			selecn[e] = 1;
		});
	}
})
.on( 'deselect', function ( e, dt, type, indexes ) {
	if ( type === 'row' ) {
		table.rows( indexes ).ids( true ).each(function(e){
			selecn[e] = 0;
		});
	}
});

for (var i = 0; i < dc.chartRegistry.list().length; i++) {
	var chartI = dc.chartRegistry.list()[i];
	chartI.on("filtered", refreshTable);
}

refreshTable();
dc.renderAll();
dc.tooltipMixin( barchart );
dc.tooltipMixin( rowchart );

[%	PROCESS standard_functions %]

[%	END # end wrapper %]
