[%	PROCESS 'scripts/dc_datatables_fn.tt';
	USE JSON.Escape( allow_blessed => 1, convert_blessed => 1 );
	scr_arr = [
		'/js/d3.min.js',
		'/js/d3.chart.min.js',
		'/js/d3.chart.tooltip.js',
		'/js/d3.chart.layout.hierarchy-ext.js',
		'/js/crossfilter.min.js',
		'/js/dc.min.js',
		'/js/checkbox-menu.js',
		'/js/datatables.min.js',
#		'https://cdn.datatables.net/v/dt/jqc-1.12.4/jszip-3.1.3/dt-1.10.15/b-1.3.1/b-colvis-1.3.1/b-html5-1.3.1/b-print-1.3.1/cr-1.3.3/fc-3.2.2/fh-3.1.2/r-2.1.1/rg-1.0.0/sc-1.4.2/se-1.2.2/datatables.min.js'
	];
	WRAPPER scripts/pageload_wrapper.tt;

%]

d3.chart("TippedVisualisation", {

	sortable: function( args ){
		return this.attach('vis').sortable( args );
	},

	collapsible: function( args ){
		return this.attach('vis').collapsible( args );
	},

	colors: function( args ){
		return this.attach('vis').colors( args );
	},

	name: function( args ){
		return this.attach('vis').name( args );
	},

	value: function( args ){
		return this.attach('vis').value( args );
	},

	duration: function( args ){
		return this.attach('vis').duration( args );
	},

	zoomable: function( args ){
		return this.attach('vis').zoomable( args );
	},

	tooltip: function( args ){
		var func = function(d) {
			return d[ args ] || 'no data for ' + args;
		};
		this.attach('tips').text( func );
	},

	resize: function() {
		this.trigger('change:size');
		if ( this.data ) {
			this.draw( this.data );
		}
	},

	initialize: function( options ) {

	  // attach the charts under a specific name to the parent chart
		this.attach("vis",
			this.base
				.chart( options.chart_type , options.chart )
			);

		var tips_options = {
			layer : this.attach('vis'),
			type : options.tooltip.selector,
			text : options.tooltip.text || function(d) {
				return d.name;
			}
		};

		this.attach('tips',
			d3.select('body')
				.chart('TooltipMixinChart', tips_options )
			);
	}
});


var res = getJson()
, label_h = {
	pp_subset: [% data_filters.schema.pp_subset.enum_map.json %]
}
, class_type_h = res.class_type_h
, container = d3.select("#partition")
	.style('height', '500px')
	.append("svg")
	.attr('width', '100%' )
	.attr('height', 500)

, text_fn = function(d,i,tip) {
	if ( d.data && d.data.taxon_display_name) {
		return d.data.taxon_display_name;
	}
	if( d.depth ) {
		return class_type_h[ d.depth ] + ': ' + d.name + ', ' + ( d.value || d.values.length ) + ' samples';
	}
	return 'all ecosystem classifications';
}

, vis = container.chart("TippedVisualisation", {
		chart_type: 'partition.rectangle'
		, tooltip: {
			selector: '.partition'
			, text: text_fn
		}
	})
, data_table_opts = {
// 	orderFixed: [2, 'asc'],
// 	rowGroup: {
// 		dataSrc: 2
// 	},

//	columnDefs: [ {
//		orderable: false,
//		className: 'select-checkbox',
//		targets:   0
//	} ],
[%
	datatable_cols( 'taxon', results.js.table_cols );
	datatable_buttons('taxon_oid');
	datatable_paging( results.js.arr.size ); %]
	deferRender: true,
	data: res.arr,
	select: {
		style: 'multi'
	},
//	scroller: true,
//	scrollY: "20rem"
}
, slug_name = 'ecosystem'
, table_id = slug_name + '__table'
, ndx = crossfilter( res.arr )
, xf_dim = new Object()
, filter_h = new Object()
, selecn = new Object()
, table = $('#' + table_id).DataTable(data_table_opts)
, env_dim_arr = [ 'ecosystem', 'ecosystem_category', 'ecosystem_type', 'ecosystem_subtype', 'specific_ecosystem' ]
, table_filter_dim = 'pp_subset'
, e
;

for ( e = 0; e < env_dim_arr.length; e++ ) {
	xf_dim[ env_dim_arr[e] ] = ndx.dimension(function(d){
//		return d[ env_dim_arr[e] ];
		return env_dim_arr.slice( 0 , e+1 )
		.map( function(el) { return d[ el ]; } )
		.join('__');
	});
}
xf_dim[ 'pp_subset' ] = ndx.dimension(function(d){ return d.pp_subset });

add_dynamic_filters( slug_name, env_dim_arr );
add_dynamic_filters( slug_name, [ 'pp_subset' ] );

env_dim_arr.forEach( function(e) {
	filter_h[e].title(function(d){
//		var x = d.key.split('__').pop();
		return ( d.key == '' ? 'unspecified' : d.key ) + ': ' + d.value;
	});
});

d3.selectAll('.js_vis_loading')
	.remove();

vis.value( '_COUNT_' )
.sortable( '_ASC_' )
.collapsible();

vis.draw( res.tree );

for (var i = 0; i < dc.chartRegistry.list().length; i++) {
	var chartI = dc.chartRegistry.list()[i];
	chartI.on("filtered", refreshTable);
}

table
.on( 'select', function ( e, dt, type, indexes ) {
	if ( type === 'row' ) {
		table.rows( indexes ).ids( true ).each(function(e){
			selecn[e] = 1;
		});
	}
})
.on( 'deselect', function ( e, dt, type, indexes ) {
	if ( type === 'row' ) {
		table.rows( indexes ).ids( true ).each(function(e){
			delete selecn[e];
		});
	}
});

refreshTable();
dc.renderAll();

[%	PROCESS 'scripts/dc_datatables_fn.tt' %]

[%	PROCESS standard_functions %]

[%	END # end wrapper %]
